// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	domain "chat/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RoomUseCase is an autogenerated mock type for the RoomUseCase type
type RoomUseCase struct {
	mock.Mock
}

// AddUserToRoom provides a mock function with given fields: ctx, roomID, userID
func (_m *RoomUseCase) AddUserToRoom(ctx context.Context, roomID string, userID string) error {
	ret := _m.Called(ctx, roomID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, roomID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRoom provides a mock function with given fields: ctx, userID, roomID
func (_m *RoomUseCase) DeleteRoom(ctx context.Context, userID string, roomID string) error {
	ret := _m.Called(ctx, userID, roomID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, roomID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChatRoomsByClass provides a mock function with given fields: ctx, className
func (_m *RoomUseCase) GetChatRoomsByClass(ctx context.Context, className string) ([]domain.ChatRoom, error) {
	ret := _m.Called(ctx, className)

	var r0 []domain.ChatRoom
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.ChatRoom); ok {
		r0 = rf(ctx, className)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ChatRoom)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, className)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatRoomsFor provides a mock function with given fields: ctx, userID
func (_m *RoomUseCase) GetChatRoomsFor(ctx context.Context, userID string) (*domain.StudentChatRooms, error) {
	ret := _m.Called(ctx, userID)

	var r0 *domain.StudentChatRooms
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.StudentChatRooms); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.StudentChatRooms)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUserFromRoom provides a mock function with given fields: ctx, roomID, userID
func (_m *RoomUseCase) RemoveUserFromRoom(ctx context.Context, roomID string, userID string, loggedID string) error {
	ret := _m.Called(ctx, roomID, userID, loggedID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, roomID, userID, loggedID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRoom provides a mock function with given fields: ctx, room
func (_m *RoomUseCase) SaveRoom(ctx context.Context, room *domain.ChatRoom) error {
	ret := _m.Called(ctx, room)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ChatRoom) error); ok {
		r0 = rf(ctx, room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
