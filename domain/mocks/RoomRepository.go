// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	domain "chat/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RoomRepository is an autogenerated mock type for the RoomRepository type
type RoomRepository struct {
	mock.Mock
}

// AddParticipantToRoomAndAddRoomForParticipant provides a mock function with given fields: ctx, roomID, userID
func (_m *RoomRepository) AddParticipantToRoomAndAddRoomForParticipant(ctx context.Context, roomID string, userID string) error {
	ret := _m.Called(ctx, roomID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, roomID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddRoomForParticipant provides a mock function with given fields: ctx, roomID, userID
func (_m *RoomRepository) AddRoomForParticipant(ctx context.Context, roomID string, userID string) error {
	ret := _m.Called(ctx, roomID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, roomID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddRoomForParticipants provides a mock function with given fields: ctx, roomID, userIDs
func (_m *RoomRepository) AddRoomForParticipants(ctx context.Context, roomID string, userIDs []string) error {
	ret := _m.Called(ctx, roomID, userIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, roomID, userIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRoom provides a mock function with given fields: ctx, roomID
func (_m *RoomRepository) DeleteRoom(ctx context.Context, roomID string) error {
	ret := _m.Called(ctx, roomID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, roomID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChatRoomsByClass provides a mock function with given fields: ctx, className
func (_m *RoomRepository) GetChatRoomsByClass(ctx context.Context, className string) ([]domain.ChatRoom, error) {
	ret := _m.Called(ctx, className)

	var r0 []domain.ChatRoom
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.ChatRoom); ok {
		r0 = rf(ctx, className)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ChatRoom)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, className)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoom provides a mock function with given fields: ctx, roomID
func (_m *RoomRepository) GetRoom(ctx context.Context, roomID string) (*domain.ChatRoom, error) {
	ret := _m.Called(ctx, roomID)

	var r0 *domain.ChatRoom
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ChatRoom); ok {
		r0 = rf(ctx, roomID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ChatRoom)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, roomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoomsFor provides a mock function with given fields: ctx, userID
func (_m *RoomRepository) GetRoomsFor(ctx context.Context, userID string) (*domain.StudentChatRooms, error) {
	ret := _m.Called(ctx, userID)

	var r0 *domain.StudentChatRooms
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.StudentChatRooms); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.StudentChatRooms)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveParticipantFromRoom provides a mock function with given fields: ctx, userID, roomID
func (_m *RoomRepository) RemoveParticipantFromRoom(ctx context.Context, userID string, roomID string) error {
	ret := _m.Called(ctx, userID, roomID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, roomID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveParticipantFromRoomAndRemoveRoomForParticipant provides a mock function with given fields: ctx, roomID, userID
func (_m *RoomRepository) RemoveParticipantFromRoomAndRemoveRoomForParticipant(ctx context.Context, roomID string, userID string) error {
	ret := _m.Called(ctx, roomID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, roomID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveRoomForParticipant provides a mock function with given fields: ctx, roomID, userID
func (_m *RoomRepository) RemoveRoomForParticipant(ctx context.Context, roomID string, userID string) error {
	ret := _m.Called(ctx, roomID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, roomID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveRoomForParticipants provides a mock function with given fields: ctx, roomID, users
func (_m *RoomRepository) RemoveRoomForParticipants(ctx context.Context, roomID string, users []domain.Student) error {
	ret := _m.Called(ctx, roomID, users)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []domain.Student) error); ok {
		r0 = rf(ctx, roomID, users)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveRoomForParticipantsAndDeleteRoom provides a mock function with given fields: ctx, room
func (_m *RoomRepository) RemoveRoomForParticipantsAndDeleteRoom(ctx context.Context, room *domain.ChatRoom) error {
	ret := _m.Called(ctx, room)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ChatRoom) error); ok {
		r0 = rf(ctx, room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRoom provides a mock function with given fields: ctx, room
func (_m *RoomRepository) SaveRoom(ctx context.Context, room *domain.ChatRoom) error {
	ret := _m.Called(ctx, room)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ChatRoom) error); ok {
		r0 = rf(ctx, room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRoomAndAddRoomForAllParticipants provides a mock function with given fields: ctx, room
func (_m *RoomRepository) SaveRoomAndAddRoomForAllParticipants(ctx context.Context, room *domain.ChatRoom) error {
	ret := _m.Called(ctx, room)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ChatRoom) error); ok {
		r0 = rf(ctx, room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateParticipantPendingState provides a mock function with given fields: ctx, roomID, userID, isPending
func (_m *RoomRepository) UpdateParticipantPendingState(ctx context.Context, roomID string, userID string, isPending bool) error {
	ret := _m.Called(ctx, roomID, userID, isPending)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) error); ok {
		r0 = rf(ctx, roomID, userID, isPending)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
