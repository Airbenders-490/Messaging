// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	cassandra "chat/messaging/repository/cassandra"
	context "context"

	gocql "github.com/gocql/gocql"

	mock "github.com/stretchr/testify/mock"
)

// QueryInterface is an autogenerated mock type for the QueryInterface type
type QueryInterface struct {
	mock.Mock
}

// Consistency provides a mock function with given fields: c
func (_m *QueryInterface) Consistency(c gocql.Consistency) cassandra.QueryInterface {
	ret := _m.Called(c)

	var r0 cassandra.QueryInterface
	if rf, ok := ret.Get(0).(func(gocql.Consistency) cassandra.QueryInterface); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cassandra.QueryInterface)
		}
	}

	return r0
}

// Exec provides a mock function with given fields:
func (_m *QueryInterface) Exec() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Scan provides a mock function with given fields: _a0
func (_m *QueryInterface) Scan(_a0 ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithContext provides a mock function with given fields: ctx
func (_m *QueryInterface) WithContext(ctx context.Context) cassandra.QueryInterface {
	ret := _m.Called(ctx)

	var r0 cassandra.QueryInterface
	if rf, ok := ret.Get(0).(func(context.Context) cassandra.QueryInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cassandra.QueryInterface)
		}
	}

	return r0
}
